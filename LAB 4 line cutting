// C++ program to implement Cohen Sutherland algorithm
// for line clipping.
#include<bits/stdc++.h>
#include<stdio.h>
#include<graphics.h>
using namespace std;
vector<double> v[100];
int p=0;
// Defining region codes
const int INSIDE = 0; // 0000
const int LEFT = 1; // 0001
const int RIGHT = 2; // 0010
const int BOTTOM = 4; // 0100
const int TOP = 8; // 1000

// Defining x_max, y_max and x_min, y_min for
// clipping rectangle. Since diagonal points are
// enough to define a rectangle
const int x_max = 10;
const int y_max = 8;
const int x_min = 4;
const int y_min = 4;

// Function to compute region code for a point(x, y)


void printLine() {
    int q=0;

}
int computeCode(double x, double y) {
    // initialized as being inside
    int code = INSIDE;

    if (x < x_min)	 // to the left of rectangle
        code |= LEFT;
    else if (x > x_max) // to the right of rectangle
        code |= RIGHT;
    if (y < y_min)	 // below the rectangle
        code |= BOTTOM;
    else if (y > y_max) // above the rectangle
        code |= TOP;

    return code;
}

// Implementing Cohen-Sutherland algorithm
// Clipping a line from P1 = (x2, y2) to P2 = (x2, y2)
void cohenSutherlandClip(double x1, double y1,
                         double x2, double y2) {
    // Compute region codes for P1, P2
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);

    // Initialize line as outside the rectangular window
    bool accept = false;

    while (true) {
        if ((code1 == 0) && (code2 == 0)) {
            // If both endpoints lie within rectangle
            accept = true;
            break;
        } else if (code1 & code2) {
            // If both endpoints are outside rectangle,
            // in same region
            break;
        } else {
            // Some segment of line lies within the
            // rectangle
            int code_out;
            double x, y;

            // At least one endpoint is outside the
            // rectangle, pick it.
            if (code1 != 0)
                code_out = code1;
            else
                code_out = code2;

            // Find intersection point;
            // using formulas y = y1 + slope * (x - x1),
            // x = x1 + (1 / slope) * (y - y1)
            if (code_out & TOP) {
                // point is above the clip rectangle
                x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);
                y = y_max;
            } else if (code_out & BOTTOM) {
                // point is below the rectangle
                x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);
                y = y_min;
            } else if (code_out & RIGHT) {
                // point is to the right of rectangle
                y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);
                x = x_max;
            } else if (code_out & LEFT) {
                // point is to the left of rectangle
                y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);
                x = x_min;
            }

            // Now intersection point x,y is found
            // We replace point outside rectangle
            // by intersection point
            if (code_out == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }
    if (accept) {

        v[p].push_back(x1);
        v[p].push_back(y1);
        v[p].push_back(x2);
        v[p].push_back(y2);
        p++;


    }
}
int main() {

    int gd=DETECT,gm,x=0;
    initgraph(&gd,&gm,"C:\\TurboC3\\BGI");

    cohenSutherlandClip(5, 5, 7, 7);
    cohenSutherlandClip(8, 9, 11, 4);
    cohenSutherlandClip(1, 5, 4, 1);
    cohenSutherlandClip(3, 5, 8, 7);
    cohenSutherlandClip(2, 9, 12, 4);
    cohenSutherlandClip(1, 15, 16, 12);
    rectangle(x_max*50,y_max*50,x_min*50,y_min*50);
    bool ebrahim=true;

    if(ebrahim)
    {
        line(5*50, 5*50, 7*50, 7*50);
        line(8*50, 9*50, 11*50, 4*50);
        line(1*50, 5*50, 4*50, 1*50);
        line(3*50, 5*50, 8*50, 7*50);
        line(2*50, 9*50, 12*50, 4*50);
        line(1*50, 15*50, 16*50, 12*50);
        //getch();

    }
    getch();
     cleardevice();
     rectangle(x_max*50,y_max*50,x_min*50,y_min*50);
    for(int i=0; i<p; i++)
    {
        line(v[i][0]*50,v[i][1]*50,v[i][2]*50,v[i][3]*50);

    }
    getch();
    return 0;
}

